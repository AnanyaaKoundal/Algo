 -->	kill(all)$
	f(x,y):=3*x + 2*y;
	x0:0;
	y0:1;
	xn:0.4;
	n:4;
	h:0.1;
	print(" ","x0"," ","y0"," ","f(x0, y0)","
	 ","y[i]")$;
	for i:1 thru n do(
	 slope:f(x0,y0),
	 y[i]:y0+h·slope,
	 print(i," iteration"),
	 print(" ", x0," ",y0," ",slope,"
	 ",y[i]),
	 y0:y[i],
	 x0:x0+h);
	print("The approximation y(0.4)=", y[n])$;

Q1 Perform 10 iterations of the Bisection method to obtain a real root of the following
	equation:
	        f(x)= x^3-5x+1 = 0          in the interval (0,1).
(%i7)	kill(all)$
	f(x):= x^3- 5*x +1;
	x0=x0:0.0;
	x1= x1:1.0;
	n:10$
	if(float(f(x0)*f(x1)>0)) then print("change values")
	else
	for i: 1 thru n do(
	    x2: (x1+x0)/2,
	    if( f(x2)=0.0) then return (x2)
	    else
	    if(f(x1)*f(x2)<0) then x0: x2
	    else x1:x2
	);
	print("The root is: ", x2);
	wxplot2d(f(x), [x,0,1]);

Q2 . Perform 6 iterations of the Secant method to obtain a real root of the following equation
	in the interval(0,1):
	        f(x) = x^5-0.5=0.
 -->	kill(all)$
	f(x):= x^5 -0.5$
	x0=x0:0.0;
	x1= x1:1.0;
	n:6$
	for i : 1 thru n do(
	    if(equal(f(x0),f(x1))) then return()
	    else
	        x2: ((x0)*f(x1)-x1*f(x0))/(f(x1)-f(x0)),
	    x0:x1, x1:x2
	);
	print("The root is ", x2)$

"The root is "" "0.8736248091896209" "
Q3 Perform 6 iterations of the Regula-Falsi method to obtain a real root of the following
	equation in the interval(0,1):
	        f(x) = x^3-3x^2 +1=0.
	Solution:
 -->	kill(all)$
	f(x):= x^3 - 3*x^2 +1$
	x0= x0:0.0$
	x1= x1:1.0$
	n:6$
	if(f(x0)*f(x1)>0) then print("Change values")
	else
	for i: 1 thru n do(
	    x2: float( (x0*f(x1)- x1*f(x0))/(f(x1)- f(x0))),
	    if(f(x2)=0.0) then return (x2)
	    else
	     if(f(x1)*f(x2)>0) then x1:x2
	    else x0:x2,
	    print(i, "iteration gives", x2)
	)$
	print("The root is ",x2)$

Q4 Perform 10 iterations of the Newton Raphson Method to find out the smallest positive root
	of the following equation starting with the initial approximation x_0=2,
	     f(x) = x^3-15=0.
	Solution:
 -->	kill(all)$
	f(x):= x^3 -15$
	define(df(x), diff(f(x),x));
	x0= x0: 2.0$
	
	for i: 1 thru 10 do(
	    if(equal(df(x0), 0.0)) then return ()
	    else
	        x1: x0 - f(x0)/ df(x0),
	    x0:x1
	)$
	print("The root is ", x1)$

Q1 Solve the system of equations
	3x1 - 0.1x2 - 0.2x3 = 7.85
	0.1x1 + 7x2 -0.3x3 = -19.3
	0.3x1 - 0.2x2 + 10x3 = 71.4 using the Gauss elimination method.
 -->	kill(all)$
	keepfloat: true$
	A= A: matrix([3.0, -0.1, -0.2], 
	                        [0.1, 7.0, -0.3],
	                        [0.3, -0.2, 10.0])$
	B=B: matrix([7.85], [-19.3], [71.4])$
	X= X: matrix([x],[y],[z])$
	AB= AB:addcol(A,B);
	T= T: triangularize(AB);
	X= invert(triangularize(A)).col(T,4);

Q7.Solve the following given system of equations
	 6x -y + z = 13
	x + y + z = 9
	10x +y -z = 19
	using the Gauss-Jordan method
 -->	kill(all)$
	keepfloat: true$
	A: matrix([6.0, -1.0, 1.0],
	                [1.0, 1.0, 1.0],
	                [10.0, 1.0, -1.0])$
	B: matrix([13.0], [9.0], [19.0])$
	X: matrix([x],[y],[z])$
	Aug: addcol(A,B)$
	S: echelon(Aug)$
	S[2]: S[2]- S[2][3]*S[3]$
	S[1]: S[1]- S[1][3]*S[3]$
	S[1]: S[1]- S[1][2]*S[2]$
	X=col(S,4);
 
Q3 Perform 12 iterations of Gauss Jacobi method to solve the
	following system of linear equations with initial approximation
	x0=[0,0,0]^T :
	5x1 - 2x2 + 3x3 = -1
	-3x1 + 9x2 +  x3 =  2
	 2x1 -  x2 - 7x3 =  3
 -->	kill(all)$
	x1= x1:  0.0$
	x2= x2:  0.0$
	x3= x3:  0.0$
	for i: 1 thru  12 do(
	    x10: (-1+ 2*x2 - 3*x3)/5,
	    x20: (2+ 3*x1 -x3)/9,
	    x30: (3 +x2 -2*x1)/(-7),
	    x1:x10,
	    x2:x20,
	    x3:x30
	)$
	print("x1: ", x1)$
	print("x2: ", x2)$
	print("x3: ", x3)$

Q2. Solve the following system of linear equations using the Gauss-Seidel method:
	26x_1 + 2x_2 + 2x_3 = 12.6
	3x_1 + 27x_2 + x_3 = -14.3
	2x_1 + 3x_2 + 17x_3 = 6.0
 -->	kill(all)$
	x1= x1:  0.0$
	x2= x2:  0.0$
	x3= x3:  0.0$
	for i: 1 thru  6 do(
	    x1: (12.6- 2*x2 - 2*x3)/26,
	    x2: (-14.3- 3*x1 -x3)/27,
	    x3: (6 -3*x2 -2*x1)/(17)
	)$
	print("x1: ", x1)$
	print("x2: ", x2)$
	print("x3: ", x3)$

Q3. Approximate the integral of f(x) =1/(2x + 5) on the interval [0,5] using the composite
	trapezoidal rule with n=10.
 -->	kill(all)$
	f(x):= 1/(2*x+5)$
	a=a:0.0$
	b=b:5.0$
	n:10$
	h:(b-a)/n$
	for i: 0 thru n do(
	    x[i]: a+ i*h,
	    y[i]: float(f(x[i]))
	)$
	sum:0$
	for i: 1 thru n-1 do(
	    sum: float(sum+ 2*y[i])
	)$
	print("Result: ", float((h/2)*(y[0]+sum+ y[n])))$
  
Q4. Evaluate I = integrate(x^2/(x^3 + 1), x,0,1) using the composite Simpson’s rule with 4
	subintervals.
 -->	kill(all)$
	f(x):= (x^2)/(x^3 +1);
	a=a:0.0$
	b=b:1.0$
	n:4$
	h:(b-a)/n$
	for i: 0 thru n do(
	    x[i]: a+ i*h,
	    y[i]: float(f(x[i]))
	)$
	sum2:0$
	sum4:0$
	for i: 1 thru n-1 do(
	    if(equal(mod(i,2),0)) then sum2: float(sum2+ 2*y[i])
	    else sum4: float(sum4+ 4*y[i])
	)$
	I[0]: float((h/3)*(y[0]+sum2+ sum4+ y[n]))$
	'I[0]= 'integrate(x^2/(x^3 + 1), x,0,1);
	print('I[0]=I[0])$

Q1.Construct the Lagrange interpolation polynomial for the data:
	 | x | 1 | 2 | 3 | 5|
	|--------------------------|
	 | f(x) | 3 | 6 | 19 | 99|
	 Hence, interpolate at x =6
 -->	kill(all)$
	p= p:[[1,3],[2,6],[3,19],[5,99]]$
	Y:0$
	n: length(p)$
	for i: 1 thru n do(
	    li:1,
	    for j: 1 thru n do(
	        if notequal(i, j) then
	        li: li*(x- p[j][1])/(p[i][1]- p[j][1])
	    ),
	    Y: Y+ li*p[i][2],
	    print("Iteration", i, "=>", Y, "=>", expand(Y))
	)$
	'f(x)= f: expand(Y);
	print(ev(f,x=6))$

Q1.Using Newton’s divided difference interpolation, find y(10) given that
	y(5) = 12, y(6) = 13, y(9) = 14, y(11) = 16.0
 -->	kill(all)$
	x= x:[5,6,9,11]$
	y: zeromatrix(4,4)$
	y[1][1]:12$
	y[2][1]:13$
	y[3][1]:14$
	y[4][1]:16$
	'y=y;
	n: length(x)$
	for i : 2 thru n do(
	    for j: 1 thru n-i+1 do(
	        y[j][i]: (y[j+1][i-1]-y[j][i-1])/(x[j+i-1]- x[j])
	    )
	)$
	x_t: 1$
	f: y[1][1]$
	for j: 1 thru n-1 do(
	    x_t: x_t*('x- x[j]),
	    f: f+ y[1][j+1]*x_t,
	    print("Iteration= ", i, "=>", expand(f))
	)$
	'b= y;
	'f('x)= expand(f);
	print("f(10)=", ev(f, x=10))$
	wxplot2d([f, [discrete,x, args(map(first, y))]], ['x, -1, 20], [legend, "f(x)", "given"]);

Q3. Consider the IVP dy/dx=3x+ 2y with y(0)=1. Find the approximated value of y at 0.4 or
	y(0.4) with step size 0.1.
(%i9)	kill(all)$
	f(x,y):=3*x + 2*y;
	x0:0;
	y0:1;
	xn:0.4;
	n:4;
	h:0.1;
	print(" ","x0"," ","y0"," ","f(x0, y0)","
	 ","y[i]")$;
	for i:1 thru n do(
	 slope:f(x0,y0),
	 y[i]:y0+h·slope,
	 print(i," iteration"),
	 print(" ", x0," ",y0," ",slope,"
	 ",y[i]),
	 y0:y[i],
	 x0:x0+h);
	print("The approximation y(0.4)=", y[n])$;
	
